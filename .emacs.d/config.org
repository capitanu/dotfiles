#+TITLE: Emacs Config
#+AUTHOR: Calin Capitanu
#+STARTUP: overview

* Config edit/reload
*** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
*** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Styling
** UI
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 180)
  ;; (set-frame-parameter (selected-frame) 'alpha '(95 95))
  ;; (add-to-list 'default-frame-alist '(alpha 95 95))
  (column-number-mode 1)
  (global-visual-line-mode 1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq-default tab-width 4)
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init )
  (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
** pretty symbols
** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      ))

  (defun syntax-for-org ()
    (interactive)
    (modify-syntax-entry ?< ".")
    (modify-syntax-entry ?> "."))
  (add-hook 'org-mode-hook 'syntax-for-org)


  (electric-pair-mode 1)
  (electric-indent-mode 1)

#+END_SRC
** welcome screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message ";; î¤¦ Happy Hacking \n\n")
#+END_SRC
** hl-line-mode
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :ensure t
    :init)
  (set-face-background 'hl-line "#131313")
  (global-hl-line-mode 1)
#+END_SRC
** line-number
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'org-mode-hook 'linum-mode)
  (add-hook 'yaml-mode-hook 'linum-mode)
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'doom-themes)
    (package-refresh-contents)
    (package-install 'doom-themes))

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    
	  doom-themes-enable-italic t)
    (setq doom-font (font-spec :family "monospace" :size 18 :weight 'semi-light)
	  doom-variable-pitch-font (font-spec :family "sans" :size 18))
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config) 
    (doom-themes-org-config))

  (if (daemonp) 
      (add-hook 'after-make-frame-functions 
		(lambda (frame) 
		  (with-selected-frame frame (load-theme 'doom-one t)))) 
    (load-theme 'doom-one t))
#+END_SRC
* Mac
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'control)

  (defun file-notify-rm-all-watches ()
  "Remove all existing file notification watches from Emacs."
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))
#+END_SRC
* Keybindings
** never kill emacs
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c"))
#+end_src
** enable-avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** cua
#+begin_src emacs-lisp
  (global-set-key "\C-r" 'cua-rectangle-mark-mode)
#+end_src
** eglot
#+begin_src emacs-lisp
  ;; (use-package eglot
  ;;   :bind (:map eglot-mode-map
  ;; 	      ("C-c a r" . #'eglot-rename))
  ;;   ;; :hook
  ;;   ;; (go-mode . eglot-ensure)
  ;;   :custom
  ;;   (eglot-autoshutdown t)
  ;;   (flymake-no-changes-timeout 5))
  ;; (global-set-key "\M-m" 'eglot-find-implementation)
  ;; (setq eglot-ignored-server-capabilites (quote (:workspaceSymbolProvider)))
#+end_src
** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (go-mode . lsp)
  :commands lsp)


  (setq lsp-go-library-directories-include-go-modules t)

  (tree-sitter-mode 0)
  (add-hook 'fundamendal-mode-hook (lambda () (tree-sitter-mode 0)))

#+end_src
** direnv
#+begin_src emacs-lisp
  (use-package direnv
    :ensure t
    :config
    (direnv-mode))
#+end_src
** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
** rename buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x r") 'rename-buffer)
#+end_src
** forward-sexp / backward-sexp
#+begin_src emacs-lisp
  (global-set-key (kbd "C-}") 'forward-sexp)
  (global-set-key (kbd "C-{") 'backward-sexp)
#+end_src
** (un)comment region
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-c") 'comment-region)
  (global-set-key (kbd "C-c C-u") 'uncomment-region)
#+end_src

** Select current line
#+begin_src emacs-lisp
  (transient-mark-mode 1)

  (defun select-current-line ()
    "Select the current line"
    (interactive)
    (end-of-line) ; move to end of line
    (set-mark (line-beginning-position)))
  (global-set-key (kbd "C-c l") 'select-current-line)
#+end_src
** scroll and next by 5 lines
#+begin_src emacs-lisp
  (defun scroll-up-and-next ()
    (interactive)
    (scroll-up-line 5)
    (next-line 5))

  (defun scroll-down-and-prev ()
    (interactive)
    (scroll-down-line 5)
    (previous-line 5))

  (global-set-key (kbd "M-N") 'scroll-up-and-next)
  (global-set-key (kbd "M-P") 'scroll-down-and-prev)
#+end_src
** swap buffers
#+BEGIN_SRC emacs-lisp
  (defun swap-buffers-in-windows ()
    "Put the buffer from the selected window in next window, and vice versa"
    (interactive)
    (let* ((this (selected-window))
	   (other (next-window))
	   (this-buffer (window-buffer this))
	   (other-buffer (window-buffer other)))
      (set-window-buffer other this-buffer)
      (set-window-buffer this other-buffer)
      )
    )
  (global-set-key (kbd "C-c s") 'swap-buffers-in-windows)
#+END_SRC
** pop-up kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Minor setting
** temp files
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
** clipboard
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
** ivy
#+begin_src emacs-lisp
  (use-package ivy :ensure t
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map
	  ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil))

#+end_src

** edit with sudo
#+BEGIN_SRC emacs-lisp
  (defun er-sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
	(find-file (concat "/sudo:root@localhost:"
			   (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

  (global-set-key (kbd "C-x M-f") #'er-sudo-edit)
#+END_SRC
** resize buffer
#+BEGIN_SRC emacs-lisp
  (defun win-resize-top-or-bot ()
    "Figure out if the current window is on top, bottom or in the
  middle"
    (let* ((win-edges (window-edges))
	   (this-window-y-min (nth 1 win-edges))
	   (this-window-y-max (nth 3 win-edges))
	   (fr-height (frame-height)))
      (cond
       ((eq 0 this-window-y-min) "top")
       ((eq (- fr-height 1) this-window-y-max) "bot")
       (t "mid"))))

  (defun win-resize-left-or-right ()
    "Figure out if the current window is to the left, right or in the
  middle"
    (let* ((win-edges (window-edges))
	   (this-window-x-min (nth 0 win-edges))
	   (this-window-x-max (nth 2 win-edges))
	   (fr-width (frame-width)))
      (cond
       ((eq 0 this-window-x-min) "left")
       ((eq (+ fr-width 4) this-window-x-max) "right")
       (t "mid"))))

  (defun win-resize-enlarge-horiz ()
    (interactive)
    (cond
     ((equal "top" (win-resize-top-or-bot)) (enlarge-window -7))
     ((equal "bot" (win-resize-top-or-bot)) (enlarge-window 7))
     ((equal "mid" (win-resize-top-or-bot)) (enlarge-window -7))
     (t (message "nil"))))

  (defun win-resize-minimize-horiz ()
    (interactive)
    (cond
     ((equal "top" (win-resize-top-or-bot)) (enlarge-window 7))
     ((equal "bot" (win-resize-top-or-bot)) (enlarge-window -7))
     ((equal "mid" (win-resize-top-or-bot)) (enlarge-window 7))
     (t (message "nil"))))

  (defun win-resize-enlarge-vert ()
    (interactive)
    (cond
     ((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally -7))
     ((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally 7))
     ((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally -7))))

  (defun win-resize-minimize-vert ()
    (interactive)
    (cond
     ((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally 7))
     ((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally -7))
     ((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally 7))))

  (global-set-key [M-s-down] 'win-resize-minimize-vert)
  (global-set-key [M-s-up] 'win-resize-enlarge-vert)
  (global-set-key (kbd "M-s-h") 'win-resize-minimize-horiz)
  (global-set-key (kbd "M-s-l") 'win-resize-enlarge-horiz)
  (global-set-key [M-s-up] 'win-resize-enlarge-horiz)
  (global-set-key [M-s-down] 'win-resize-minimize-horiz)
  (global-set-key (kbd "M-s-h") 'win-resize-enlarge-vert)
  (global-set-key (kbd "M-s-l") 'win-resize-minimize-vert)
#+END_SRC
** auto-refresh
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
** exit without asking to kill processes
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-processes nil)
#+END_SRC
** stop-asking-symlink-open
#+begin_src emacs-lisp
  (setq vc-follow-symlinks nil)
  (setq org-confirm-babel-evaluate nil)
#+end_src
** en in bashrc
#+begin_src emacs-lisp
  (defun open-buffer-with (txt)
    "create a new buffer, insert txt"
    (switch-window)
    (find-file txt))
#+end_src

** y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** next-line-add-new
#+begin_src emacs-lisp
  (setq next-line-add-newlines t)
#+end_src
** backup in one place
#+BEGIN_SRC emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
#+END_SRC
* Org mode
** basic config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
  (add-to-list 'org-structure-template-alist '("iex" . "src elixir"))
  (require 'org-tempo)
  ;; (setq org-src-window-setup 'current-window)
  ;;  (add-to-list 'org-structure-template-alist
  ;;	       '("el" . "src\n"))
  ;;  (add-to-list 'org-structure-template-alist
  ;;	       '("iex" . "src\n"))
#+END_SRC
** enable-org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
    ;;    (add-hook 'org-mode-hook (lambda () (electric-indent-mode 0)))
    (add-hook 'org-mode-hook 'prettify-symbols-mode))
#+END_SRC

* Buffers
** buffer switching with ido
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
  (global-set-key (kbd "C-x C-b") 'counsel-switch-buffer)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
** enable-ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** expert-mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (setq magit-display-buffer-function
	(lambda (buffer)
	  (display-buffer buffer '(display-buffer-same-window))))
  (use-package magit
    :ensure t
    :pin melpa)
  (global-set-key (kbd "C-c g") 'magit-status)
#+END_SRC
* Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("q" "w" "e" "r" "a" "s" "d" "f"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* vterm
#+BEGIN_SRC emacs-lisp
	(use-package vterm
	  :ensure t)
	(global-set-key (kbd "<C-return>") 'multi-vterm)

	(add-hook 'vterm-mode-hook (lambda ()
								 (setq-local global-hl-line-mode nil)))
	(use-package multi-vterm
	  :ensure t)
  (setq vterm-max-scrollback 100000)
#+END_SRC
* Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  (setq doom-modeline-icon 1)
  (setq doom-modeline-buffer-file-name-style 'auto)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-workspace-name t)
  (setq doom-modeline-persp-name t)
  (setq doom-modeline-buffer-file-name-style 'shrink)
#+end_src

* Window split
#+BEGIN_SRC emacs-lisp
  (setq split-width-threshold 1)
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* Which key
** enable-which-key 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Programming
** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** languages
*** go
#+begin_src emacs-lisp
  (use-package go-mode
	:ensure t)
#+end_src

*** js
#+begin_src emacs-lisp
  (setq js-indent-level 2)

  (add-to-list 'load-path "/Users/capitanu/repos/github.com/tsi.el/")
  (require 'tsi-typescript)
  (tsi-typescript-mode t)
#+end_src
*** tsx
#+begin_src emacs-lisp

  (add-to-list 'load-path "/Users/capitanu/repos/github.com/tsx-mode.el/")
  (require 'tsx-mode)
  (tsx-mode t)

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . tsx-mode))
#+end_src

*** abap
#+begin_src emacs-lisp
  (add-to-list 'load-path "/Users/capitanu/repos/github.com/abap-mode/")
  (require 'abap-mode)
  (add-to-list 'auto-mode-alist '("\\.abap\\'" . abap-mode))

#+end_src

